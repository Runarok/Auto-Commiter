name: Generate Repositories JSON

on:
  push:
    branches:
      - main  # Trigger the workflow when there are pushes to the main branch
  workflow_dispatch:  # Allow the workflow to be manually triggered

jobs:
  generate-json:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment to run the job

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3  # This step checks out the repository code so we can work with it.

      # Step 2: Fetch repositories from GitHub API and categorize them
      - name: Fetch Repositories and Categorize
        run: |
          # Define the GitHub username (your GitHub username)
          USERNAME="RUNAROK"
          
          # Fetch the repositories list from GitHub API
          RESPONSE=$(curl -s "https://api.github.com/users/$USERNAME/repos?per_page=100&sort=updated")

          # Prepare the JSON arrays for categorized repositories
          recent_repos="[]"
          archived_repos="[]"
          unarchived_repos="[]"

          # Get current date in YYYY-MM-DD format
          CURRENT_DATE=$(date +%Y-%m-%d)

          # Loop through repositories and categorize them
          for repo in $(echo "$RESPONSE" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${repo} | base64 --decode | jq -r ${1}
            }

            # Extract repository details
            REPO_NAME=$(_jq '.name')
            REPO_DESCRIPTION=$(_jq '.description')
            REPO_CREATED_AT=$(_jq '.created_at')
            REPO_UPDATED_AT=$(_jq '.updated_at')
            REPO_ARCHIVED=$(_jq '.archived')
            REPO_URL=$(_jq '.html_url')

            # Define a threshold for "recent" (repositories updated within the last 1 year)
            RECENT_THRESHOLD=$(date -d "-1 year" +%Y-%m-%d)

            # Categorize repositories based on their update time and archive status
            if [ "$REPO_ARCHIVED" == "true" ]; then
              # Add to "archived" category
              archived_repos=$(echo "$archived_repos" | jq --arg name "$REPO_NAME" --arg description "$REPO_DESCRIPTION" --arg created_at "$REPO_CREATED_AT" --arg updated_at "$REPO_UPDATED_AT" --arg url "$REPO_URL" '. + [{"name": $name, "description": $description, "created_at": $created_at, "updated_at": $updated_at, "url": $url}]')
            elif [[ "$REPO_UPDATED_AT" > "$RECENT_THRESHOLD"* ]]; then
              # Add to "recent" category (only 5 recent repos will be kept)
              recent_repos=$(echo "$recent_repos" | jq --arg name "$REPO_NAME" --arg description "$REPO_DESCRIPTION" --arg created_at "$REPO_CREATED_AT" --arg updated_at "$REPO_UPDATED_AT" --arg url "$REPO_URL" '. + [{"name": $name, "description": $description, "created_at": $created_at, "updated_at": $updated_at, "url": $url}]')
            else
              # Add to "unarchived" category
              unarchived_repos=$(echo "$unarchived_repos" | jq --arg name "$REPO_NAME" --arg description "$REPO_DESCRIPTION" --arg created_at "$REPO_CREATED_AT" --arg updated_at "$REPO_UPDATED_AT" --arg url "$REPO_URL" '. + [{"name": $name, "description": $description, "created_at": $created_at, "updated_at": $updated_at, "url": $url}]')
            fi
          done

          # Limit the "recent" category to only the 5 most recent repositories
          recent_repos=$(echo "$recent_repos" | jq 'if length > 5 then .[0:5] else . end')

          # Create the final JSON structure
          FINAL_JSON=$(jq -n \
            --argjson recent "$recent_repos" \
            --argjson archived "$archived_repos" \
            --argjson unarchived "$unarchived_repos" \
            '{
              "repositories": {
                "recent": $recent,
                "archived": $archived,
                "unarchived": $unarchived
              }
            }')

          # Save the final JSON to a file
          echo "$FINAL_JSON" > repositories.json

      # Step 3: Commit the generated JSON file as yourself (your GitHub username and email)
      - name: Commit and Push Changes as Yourself
        uses: EndBug/add-and-commit@v7  # Action to commit and push the file to the repository
        with:
          author_name: 'RUNAROK'  # Use your GitHub username for the commit
          author_email: 'your-email@example.com'  # Use your GitHub email for the commit
          message: 'Generated repositories JSON'  # Commit message
          add: 'repositories.json'  # Specify the file to commit

      # Step 4: Push the commit to GitHub
      - name: Push Commit to GitHub
        uses: ad-m/github-push-action@master  # Action to push the changes to GitHub
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Authenticate using the GitHub token
